# Input params

# - user_repo: "cli/cli"
# - asset_name: asset to download ("gh_{}_linux_amd64.tar.gz")
#   - curly braces expand to latest tag name without `v` prefix ("{}" -> "2.20.2")
# - get_installed_version: a shell command to get tag of installed version
# - install_binary: shell command that installs binary

# Usage example:

# vars:
#   apps:
#     - user_repo: cli/cli
#       asset_name: gh_{}_linux_amd64.tar.gz
#       get_installed_version: "echo v$(gh version | head -1 | cut -d ' ' -f 3)"
#       install_binary: install -o root -g root -m 755 ./gh_{}_linux_amd64/gh_{}_linux_amd64/bin/gh /usr/local/bin
# tasks:
#  - include_role:
#      name: ../roles/install_from_github
#    vars:
#      user_repo: "{{ item.user_repo }}"
#      asset_name: "{{ item.asset_name }}"
#      get_installed_version: "{{ item.get_installed_version }}"
#      install_binary: "{{ item.install_binary }}"
#    with_items: "{{ apps }}"

- name: Get user and repo names
  set_fact:
    user: "{{ user_repo | split('/') | first }}"
    repo: "{{ user_repo | split('/') | last }}"

- name: Try to get installed version
  shell: "{{ get_installed_version }}"
  register: installed_version
  ignore_errors: true
- name: Print installed version
  ansible.builtin.debug:
    var: installed_version

- name: Get latest release from Github
  block:
    - name: Install or update pip
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      become: true
      run_once: true
      ignore_errors: true
      with_items:
        - python-pip
        - python3-pip
    - name: Install github3 python package
      run_once: true
      ansible.builtin.pip:
        name: github3.py
    - community.general.github_release:
        user: "{{ user }}"
        repo: "{{ repo }}"
        action: latest_release
        token: "{{ github_token }}"
      register: latest_release
    - name: Print Latest release
      ansible.builtin.debug:
        var: latest_release

- name: Install latest version
  when: installed_version.stdout != latest_release.tag
  block:
    - set_fact:
        tag: "{{ latest_release.tag | replace('v', '') }}"
    - set_fact:
        _asset_name: "{{ asset_name | replace('{}', tag) }}"
    - set_fact:
        _unarchive_path: "{{ _asset_name | replace('.tar.gz', '') | replace('.zip', '') }}"

    - debug:
        var: _asset_name
    - debug:
        var: _unarchive_path

    - name: Download release assets
      ansible.builtin.get_url:
        url: "https://github.com/{{ user }}/{{ repo }}/releases/download/{{ latest_release.tag }}/{{ _asset_name }}"
        dest: "/tmp"
    - name: Unarchive downloaded assets
      block:
        - name: Create temp dir to unarchive asset to if it does not exist
          ansible.builtin.file:
            path: "/tmp/{{ _unarchive_path }}"
            state: directory
          ignore_errors: true
        - ansible.builtin.unarchive:
            src: "/tmp/{{ _asset_name }}"
            dest: "/tmp/{{ _unarchive_path }}"
      ignore_errors: true
    - name: Install Binary
      command:
        chdir: "/tmp"
        cmd: "{{ install_binary | replace('{}', tag) }}"
      become: true
